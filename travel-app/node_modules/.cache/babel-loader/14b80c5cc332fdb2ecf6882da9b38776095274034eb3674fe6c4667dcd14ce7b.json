{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\Travel-WebApp\\\\travel-app\\\\src\\\\ImageSelector.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport api from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DisplayImage = () => {\n  _s();\n  const [imageName, setImageName] = useState('');\n  const [imageSrc, setImageSrc] = useState('');\n  const [loading, setLoading] = useState(false);\n  const handleInputChange = event => {\n    setImageName(event.target.value);\n  };\n  const getImage = async () => {\n    try {\n      setLoading(true);\n      const response = await api.get(`/images/display-image/${imageName}`, {\n        responseType: 'blob' // Set responseType to 'blob' to handle binary data\n      });\n\n      const reader = new FileReader();\n      reader.onload = async () => {\n        const image = new Image();\n        image.src = reader.result;\n        image.onload = () => {\n          const canvas = document.createElement('canvas');\n          const maxWidth = 300; // Adjust the maximum width as needed\n          const maxHeight = 300; // Adjust the maximum height as needed\n          let width = image.width;\n          let height = image.height;\n          if (width > maxWidth || height > maxHeight) {\n            const aspectRatio = width / height;\n            if (width > height) {\n              width = maxWidth;\n              height = width / aspectRatio;\n            } else {\n              height = maxHeight;\n              width = height * aspectRatio;\n            }\n          }\n          canvas.width = width;\n          canvas.height = height;\n          const ctx = canvas.getContext('2d');\n          ctx.drawImage(image, 0, 0, width, height);\n          const resizedImageUrl = canvas.toDataURL('image/jpeg'); // Change format if needed\n\n          setImageSrc(resizedImageUrl);\n          setLoading(false);\n        };\n      };\n      reader.readAsDataURL(response.data);\n    } catch (error) {\n      console.error('There was a problem fetching the image:', error);\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter image name\",\n        value: imageName,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getImage,\n        children: \"Fetch Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading image...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this) : imageSrc ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imageSrc,\n      alt: imageName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No image to display\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(DisplayImage, \"qBg91NKSWVvTdPJVkqG35BpXpz0=\");\n_c = DisplayImage;\nexport default DisplayImage;\nvar _c;\n$RefreshReg$(_c, \"DisplayImage\");","map":{"version":3,"names":["React","useState","axios","api","jsxDEV","_jsxDEV","DisplayImage","_s","imageName","setImageName","imageSrc","setImageSrc","loading","setLoading","handleInputChange","event","target","value","getImage","response","get","responseType","reader","FileReader","onload","image","Image","src","result","canvas","document","createElement","maxWidth","maxHeight","width","height","aspectRatio","ctx","getContext","drawImage","resizedImageUrl","toDataURL","readAsDataURL","data","error","console","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","alt","_c","$RefreshReg$"],"sources":["D:/Work/Travel-WebApp/travel-app/src/ImageSelector.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport api from './api'\r\n\r\nconst DisplayImage = () => {\r\n  const [imageName, setImageName] = useState('');\r\n  const [imageSrc, setImageSrc] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleInputChange = (event) => {\r\n    setImageName(event.target.value);\r\n  };\r\n\r\n  const getImage = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await api.get(`/images/display-image/${imageName}`, {\r\n        responseType: 'blob', // Set responseType to 'blob' to handle binary data\r\n      });\r\n\r\n      const reader = new FileReader();\r\n      reader.onload = async () => {\r\n        const image = new Image();\r\n        image.src = reader.result;\r\n\r\n        image.onload = () => {\r\n          const canvas = document.createElement('canvas');\r\n          const maxWidth = 300; // Adjust the maximum width as needed\r\n          const maxHeight = 300; // Adjust the maximum height as needed\r\n          let width = image.width;\r\n          let height = image.height;\r\n\r\n          if (width > maxWidth || height > maxHeight) {\r\n            const aspectRatio = width / height;\r\n\r\n            if (width > height) {\r\n              width = maxWidth;\r\n              height = width / aspectRatio;\r\n            } else {\r\n              height = maxHeight;\r\n              width = height * aspectRatio;\r\n            }\r\n          }\r\n\r\n          canvas.width = width;\r\n          canvas.height = height;\r\n\r\n          const ctx = canvas.getContext('2d');\r\n          ctx.drawImage(image, 0, 0, width, height);\r\n\r\n          const resizedImageUrl = canvas.toDataURL('image/jpeg'); // Change format if needed\r\n\r\n          setImageSrc(resizedImageUrl);\r\n          setLoading(false);\r\n        };\r\n      };\r\n      reader.readAsDataURL(response.data);\r\n\r\n    } catch (error) {\r\n      console.error('There was a problem fetching the image:', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter image name\"\r\n          value={imageName}\r\n          onChange={handleInputChange}\r\n        />\r\n        <button onClick={getImage}>Fetch Image</button>\r\n      </div>\r\n      {loading ? (\r\n        <p>Loading image...</p>\r\n      ) : imageSrc ? (\r\n        <img src={imageSrc} alt={imageName} />\r\n      ) : (\r\n        <p>No image to display</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayImage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}